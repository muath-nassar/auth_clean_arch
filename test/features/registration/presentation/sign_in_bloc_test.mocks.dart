// Mocks generated by Mockito 5.4.4 from annotations
// in auth_clean_arch/test/features/registration/presentation/sign_in_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:auth_clean_arch/core/errors/failures.dart' as _i7;
import 'package:auth_clean_arch/core/utils/encryption.dart' as _i3;
import 'package:auth_clean_arch/core/utils/validators/email_validator.dart'
    as _i9;
import 'package:auth_clean_arch/core/utils/validators/password_validator.dart'
    as _i10;
import 'package:auth_clean_arch/features/registration/domain/entities/user.dart'
    as _i8;
import 'package:auth_clean_arch/features/registration/domain/repositories/user_repository.dart'
    as _i2;
import 'package:auth_clean_arch/features/registration/domain/use_cases/login_use_case.dart'
    as _i5;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserRepository_0 extends _i1.SmartFake
    implements _i2.UserRepository {
  _FakeUserRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePasswordHashingUtil_1 extends _i1.SmartFake
    implements _i3.PasswordHashingUtil {
  _FakePasswordHashingUtil_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i5.LoginUseCase {
  MockLoginUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.UserRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeUserRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.UserRepository);

  @override
  _i3.PasswordHashingUtil get hashUtil => (super.noSuchMethod(
        Invocation.getter(#hashUtil),
        returnValue: _FakePasswordHashingUtil_1(
          this,
          Invocation.getter(#hashUtil),
        ),
      ) as _i3.PasswordHashingUtil);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.User>> call(_i5.LoginParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.User>>.value(
            _FakeEither_2<_i7.Failure, _i8.User>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.User>>);
}

/// A class which mocks [EmailValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailValidator extends _i1.Mock implements _i9.EmailValidator {
  MockEmailValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Either<_i7.Failure, String> validate(String? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #validate,
          [value],
        ),
        returnValue: _FakeEither_2<_i7.Failure, String>(
          this,
          Invocation.method(
            #validate,
            [value],
          ),
        ),
      ) as _i4.Either<_i7.Failure, String>);
}

/// A class which mocks [PasswordValidator].
///
/// See the documentation for Mockito's code generation for more information.
class MockPasswordValidator extends _i1.Mock implements _i10.PasswordValidator {
  MockPasswordValidator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Either<_i7.Failure, String> validate(String? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #validate,
          [value],
        ),
        returnValue: _FakeEither_2<_i7.Failure, String>(
          this,
          Invocation.method(
            #validate,
            [value],
          ),
        ),
      ) as _i4.Either<_i7.Failure, String>);
}
