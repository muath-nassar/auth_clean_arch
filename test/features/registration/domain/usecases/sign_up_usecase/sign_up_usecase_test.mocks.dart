// Mocks generated by Mockito 5.4.4 from annotations
// in auth_clean_arch/test/features/registration/domain/usecases/sign_up_usecase/sign_up_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:auth_clean_arch/core/errors/failures.dart' as _i5;
import 'package:auth_clean_arch/features/registration/domain/entities/user.dart'
    as _i6;
import 'package:auth_clean_arch/features/registration/domain/repositories/user_repository.dart'
    as _i3;
import 'package:auth_clean_arch/features/registration/domain/use_cases/sign_up_use_case.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i3.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserByEmail(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [email],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #getUserByEmail,
            [email],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> getUserById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #getUserById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, _i6.UserLoginCredentials>> getUserAuthCredentials(
          String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserAuthCredentials,
          [email],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.UserLoginCredentials>>.value(
                _FakeEither_0<_i5.Failure, _i6.UserLoginCredentials>(
          this,
          Invocation.method(
            #getUserAuthCredentials,
            [email],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.UserLoginCredentials>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getCurrentUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserId,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #getCurrentUserId,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> createUser(
          _i7.UserCreateParams? newUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [newUser],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #createUser,
            [newUser],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> updateUser(
          _i6.User? updatedUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [updatedUser],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #updateUser,
            [updatedUser],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> cacheCurrentUser(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrentUser,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #cacheCurrentUser,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.User>> deleteUser(int? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [userId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.User>>.value(
            _FakeEither_0<_i5.Failure, _i6.User>(
          this,
          Invocation.method(
            #deleteUser,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.User>>);
}
